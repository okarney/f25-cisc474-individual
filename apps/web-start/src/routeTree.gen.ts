/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as EnrollmentRouteImport } from './routes/enrollment'
import { Route as Assignment1RouteImport } from './routes/assignment1'
import { Route as CourseRouteImport } from './routes/$course'
import { Route as IndexRouteImport } from './routes/index'

const EnrollmentRoute = EnrollmentRouteImport.update({
  id: '/enrollment',
  path: '/enrollment',
  getParentRoute: () => rootRouteImport,
} as any)
const Assignment1Route = Assignment1RouteImport.update({
  id: '/assignment1',
  path: '/assignment1',
  getParentRoute: () => rootRouteImport,
} as any)
const CourseRoute = CourseRouteImport.update({
  id: '/$course',
  path: '/$course',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$course': typeof CourseRoute
  '/assignment1': typeof Assignment1Route
  '/enrollment': typeof EnrollmentRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$course': typeof CourseRoute
  '/assignment1': typeof Assignment1Route
  '/enrollment': typeof EnrollmentRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$course': typeof CourseRoute
  '/assignment1': typeof Assignment1Route
  '/enrollment': typeof EnrollmentRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/$course' | '/assignment1' | '/enrollment'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$course' | '/assignment1' | '/enrollment'
  id: '__root__' | '/' | '/$course' | '/assignment1' | '/enrollment'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CourseRoute: typeof CourseRoute
  Assignment1Route: typeof Assignment1Route
  EnrollmentRoute: typeof EnrollmentRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/enrollment': {
      id: '/enrollment'
      path: '/enrollment'
      fullPath: '/enrollment'
      preLoaderRoute: typeof EnrollmentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/assignment1': {
      id: '/assignment1'
      path: '/assignment1'
      fullPath: '/assignment1'
      preLoaderRoute: typeof Assignment1RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$course': {
      id: '/$course'
      path: '/$course'
      fullPath: '/$course'
      preLoaderRoute: typeof CourseRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CourseRoute: CourseRoute,
  Assignment1Route: Assignment1Route,
  EnrollmentRoute: EnrollmentRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
